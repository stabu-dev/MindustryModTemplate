buildscript{
    dependencies{
        classpath "com.github.Anuken.Arc:arc-core:$arcVersion"
        classpath "com.github.Anuken.Mindustry:core:$mindustryVersion"
        classpath "com.squareup:javapoet:$javapoetVersion"
        classpath "com.github.Anuken:jabel:$jabelVersion"
    }

    repositories{
        mavenCentral()
        maven{ url "https://maven.xpdustry.com/mindustry" }
        maven{ url 'https://jitpack.io' }
    }
}

allprojects{
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    group = 'com.github.ModTemplate'
    version = modVersion

    ext{
        sdkRoot = System.getenv('ANDROID_HOME') ?: System.getenv('ANDROID_SDK_ROOT')
        windows = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')
        taskNames = gradle.startParameter.taskNames

        assetsDir = new File(project(':main').projectDir, 'assets/')
        assetsRawDir = new File(project(':main').projectDir, 'assets-raw/')
        spritesDir = new File(assetsDir, 'sprites/')
        spritesRawDir = new File(assetsRawDir, 'sprites/')
        mindustryPath = project.hasProperty('mindustryPath') ? project.property('mindustryPath') : null

        // `-Ptools.recompile` will force the :main project to recompile. Default is `false`.
        toolRecompile = project.hasProperty('tools.recompile') && Boolean.parseBoolean(project.property('tools.recompile') as String)

        // `-Ptools.rearch` will make the .jar file resulted from :main:deploy and/or :main:deployDex also include the generated
        // assets, without recompiling. Default is `true`.
        // See also :tools:rearchive
        toolRearchive = !project.hasProperty('tools.rearch') || Boolean.parseBoolean(project.property('tools.rearch') as String)
    }

    repositories{
        mavenCentral()
        maven{ url "https://maven.xpdustry.com/mindustry" }
        maven{ url "https://jitpack.io" }
    }

    task sourcesJar(type: Jar, dependsOn: classes){
        archiveClassifier.set 'sources'
        from sourceSets.main.allSource
    }

    artifacts{
        archives sourcesJar
    }

    java{
        withJavadocJar()
        withSourcesJar()
    }

    publishing{
        publications{
            maven(MavenPublication){
                from components.java
            }
        }
    }

    tasks.withType(JavaCompile){
        options.incremental = true
        options.encoding = 'UTF-8'
        options.compilerArgs += '-Xlint:deprecation'

        options.fork = true
        options.forkOptions.jvmArgs += [
            '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-opens=java.base/sun.reflect.annotation=ALL-UNNAMED'
        ]
    }

    tasks.withType(Javadoc){
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('-release', '17')
    }
}

import arc.files.Fi
import arc.util.OS

tasks.register('install', DefaultTask) {

    final def mainProj = project(':main')
    final def deployJarProvider = mainProj.tasks.named('deploy', Jar).flatMap { it.archiveFile }
    final def mindustryPathProp = project.providers.gradleProperty('mindustryPath')

    inputs.file(deployJarProvider)
            .withPathSensitivity(PathSensitivity.ABSOLUTE)
    inputs.property("mindustryPathPropValue", mindustryPathProp.orElse(""))

    dependsOn(mainProj.tasks.named('deploy'))

    doLast {
        File jarFile = deployJarProvider.get().asFile
        String customPath = mindustryPathProp.getOrNull()
        def modsDir

        if (customPath && !customPath.trim().isEmpty()) {
            modsDir = Fi.get(customPath)
        } else {
            modsDir = Fi.get(OS.getAppDataDirectoryString("Mindustry")).child("mods")
        }

        modsDir.mkdirs()

        File existingJar = modsDir.child(jarFile.name).file()
        if (existingJar.exists()) {
            existingJar.delete()
        }

        Fi.get(jarFile as String).copyTo(modsDir)

        logger.lifecycle("Ð¡opied '${jarFile.name}' to '${modsDir.path()}'.")
    }
}